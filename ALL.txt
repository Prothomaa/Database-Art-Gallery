
drop table payment;
drop table cart;
drop table buy;
drop table customer;
drop table publish;
drop table exhibition;
drop table artist;
drop table art;

create table art (
	art_id integer not null ,
	art_name varchar(20),
	art_type varchar(20),
	primary key (art_id)
);

create table artist (
	artist_id integer not null ,
	artist_fname varchar(20),
	artist_lname varchar(20),
	artist_email varchar(20),
	artist_country varchar(20),
	art_id integer not null ,
	art_description varchar(20),
	primary key (artist_id),
	foreign key (art_id) references art(art_id) on delete cascade
);

create table exhibition (
	ex_id integer not null,
	ex_start_date date,
	ex_end_date date,
	art_id integer not null ,
	primary key (ex_id),
	foreign key (art_id) references art(art_id) on delete cascade
);

create table publish (
	ex_id integer,
	artist_id integer,
	location varchar(20) not null unique,
	foreign key (ex_id) references exhibition(ex_id) ,
	foreign key (artist_id) references artist(artist_id) on delete cascade
);

create table customer (
	cust_id integer not null,
	cust_fname varchar(20),
	cust_lname varchar(20),
	cust_email varchar(20) not null ,
	cust_address varchar(20),
	primary key (cust_id )
);

create table buy (
	buy_id integer not null,
	cust_id integer,
	art_id integer,
	art_price integer,
	rating_out_of_5 integer default 0 ,
	primary key (buy_id),
	foreign key (art_id) references art(art_id),
	foreign key (cust_id) references customer(cust_id)
);

create table cart (
	cart_id integer not null,
	cust_id integer unique,
	total_cost_in_doller integer,
	total_ordered_quantity integer,
	order_date date,
	primary key (cart_id),
	foreign key (cust_id) references customer(cust_id)
);

create table payment (
	pay_id integer not null,
	cart_id integer,
	pay_type varchar(20) not null ,
	total_amount_in_doller integer,
	primary key (pay_id),
	foreign key (cart_id) references cart(cart_id)
);


insert into art values (1,'light','oil painting');
insert into art values (2,'flower','acrylic painting');
insert into art values (3,'candle','water painting');
insert into art values (4,'nature','sketch');
insert into art values (5,'forest','acrylic painting');
insert into art values (6,'wild life','photography');
commit;

insert into artist values (1,'pablo','picasso','pablo@gmail.com','spain',1,'oil painting');
insert into artist values (2,'vincent','vangogh','vincent@gmail.com','netherlands',2,'acrylic painting');
insert into artist values (3,'leo','vinchi','leo@gmail.com','italy',4,'acrylic painting');
insert into artist values (4,'joynul','abedin','joynul@gmail.com','bangladesh',3,'acrylic painting');
insert into artist values (5,'ver','meer','ver@gmail.com','netherlands',5,'acrylic painting');
insert into artist values (6,'ver','meer','ver@gmail.com','netherlands',6,'acrylic painting');
commit;

insert into exhibition values (1,'02-jan-2023','05-jan-2023',1);
insert into exhibition values (2,'02-jan-2023','05-jan-2023',2);
insert into exhibition values (3,'02-jan-2023','05-jan-2023',3);
insert into exhibition values (4,'21-sep-2023','22-sep-2023',4);
insert into exhibition values (5,'21-sep-2023','22-sep-2023',5);
insert into exhibition values (6,'21-sep-2023','22-sep-2023',6);
commit;

insert into publish values (1,1,'usa');
insert into publish values (2,1,'bangladesh');
insert into publish values (3,2,'italy');
insert into publish values (4,3,'korea');
insert into publish values (5,4,'russia');
commit;

insert into customer values (1,'john','doe','john@gmail.com','canada');
insert into customer values (2,'harry','potter','harry@gmail.com','england');
insert into customer values (3,'jeon','jungkook','jeon@gmail.com','korea');
insert into customer values (4,'kim','taehyung','kim@gmail.com','korea');
insert into customer values (5,'park','jimin','park@gmail.com','japan');
insert into customer (cust_id, cust_lname, cust_email, cust_address) values (6,'namjoon','namjoon@gmail.com','korea');
insert into customer (cust_id, cust_lname, cust_email, cust_address) values (7,'namjoon','namjoon@gmail.com','korea');
commit;

insert into buy values (1,1,1,550,4);
insert into buy values (2,1,2,670,5);
insert into buy values (3,2,1,550,4);
insert into buy values (4,3,3,1550,3);
insert into buy values (5,4,4,750,4);
insert into buy values (6,5,5,950,5);
commit;

insert into cart values (1,1,1220,2,'02-mar-2022');
insert into cart values (2,2,550,1,'05-mar-2022');
insert into cart values (3,3,1550,1,'15-may-2022');
insert into cart (cart_id, cust_id, total_cost_in_doller,order_date) values (4,4,750,'17-jul-2022');
insert into cart values (5,5,950,1,'22-nov-2022');
commit;

insert into payment values (1,1,'cash on delivery',1220);
insert into payment values (2,2,'bkash',550);
insert into payment values (3,3,'bank check',1550);
insert into payment values (4,4,'debit card',750);
insert into payment values (5,5,'paypal',950);
commit;

describe art;
describe artist;
describe exhibition;
describe publish;
describe customer;
describe buy;
describe cart;
describe payment;

select * from art;
select * from artist;
select * from exhibition;
select * from publish;
select * from customer;
select * from buy;
select * from cart;
select * from payment;


alter table art add art_price integer;
alter table art rename column art_price to art_price_in_doller;
alter table art drop column art_price_in_doller;
describe art ;

insert into artist values (7,'claude','monet','claude@gmail.com','netherlands',6,'pastel painting');
update artist set art_description = 'photography' where artist_id = 7;
delete from artist where artist_id = 7;
select * from artist;

select ex_start_date from exhibition;
select distinct(ex_start_date) from exhibition;
select (art_price/5) from buy where buy_id = 2;
select artist_fname, artist_lname from artist where artist_id = 3 or artist_id = 5;
select artist_fname, artist_lname from artist where artist_id = 5 and art_id = 5;

select buy_id from buy where art_price between 500 and 1000;
select buy_id from buy where art_price not between 500 and 1000;
select buy_id from buy where art_price>= 500 and art_price<= 1000;
select buy_id from buy where art_price in (550, 750);
select artist_email from artist where artist_country like '%lands';
select * from buy order by art_price;


select sum(art_price) from buy where cust_id = 1;
select art_name from art where art_type = 'oil painting';
select art_name from art where art_id = (select art_id from artist where artist_country = 'spain');
select max(art_price) from buy;
select count(*) from customer;
select count(cust_fname) from customer;
select avg(nvl(total_ordered_quantity,0)) from cart;

select total_ordered_quantity, count(cart_id) from cart where total_cost_in_doller >800 group by total_ordered_quantity;
select total_ordered_quantity from cart group by total_ordered_quantity having total_ordered_quantity>=1 ;

select cust_fname, cust_lname from customer where cust_id = 5
union
select c.cust_fname, c.cust_lname from customer c where c.cust_id in(select o.cust_id from buy o where art_price >= 670 ) 
intersect 
select cust_fname, cust_lname from customer where cust_id = 5;

select cust_fname, cust_lname from customer where cust_id = 2
union
(select c.cust_fname, c.cust_lname from customer c where c.cust_id in(select o.cust_id from buy o where art_price >= 670 )
minus
select cust_fname, cust_lname from customer where cust_id = 5);

select c.order_date, p.total_amount_in_doller from cart c join payment p on c.cart_id = p.cart_id;
select c.order_date, p.total_amount_in_doller from cart c natural join payment p;
select c.order_date, p.total_amount_in_doller from cart c cross join payment p;

select c.order_date, p.total_amount_in_doller from cart c left outer join payment p on c.cart_id = p.cart_id;
select c.order_date, p.total_amount_in_doller from cart c right outer join payment p on c.cart_id = p.cart_id;
select c.order_date, p.total_amount_in_doller from cart c full outer join payment p on c.cart_id = p.cart_id;

select p.total_amount_in_doller from payment p join payment q on p.total_amount_in_doller<q.total_amount_in_doller;

set serveroutput on
declare
price buy.art_price%type;
name art.art_name%type;
begin
select max(art_price) into price from buy;
dbms_output.put_line(' Expensive art:' || price);
end;
/


set serveroutput on
declare
price buy.art_price%type;
name art.art_name%type;
begin
select art_name into name from art where art_id in (select art_id from buy where art_price in (select max(art_price) from buy));
dbms_output.put_line(' Expensive art: ' || name);
end;
/

select art_name from art where art_id in (select art_id from buy where art_price in (select max(art_price) from buy));
select art_id from buy where art_price in (select max(art_price) from buy);

set serveroutput on
declare
price buy.art_price%type;
name art.art_name%type;
begin
select max(art_price) into price from buy;
select art_name into name from art where art_id in (select art_id from buy where art_price like price);
dbms_output.put_line(' Expensive art: ' || name);
end;
/

set serveroutput on
declare
id art.art_id%type;
name art.art_name%type;
cursor c1 is select art_id, art_name from art;

begin
open c1;
loop
fetch c1 into id, name;
exit when c1% notfound;
dbms_output.put_line('Art no: '|| id || ' ' || 'Art name: ' || name);

end loop;
close c1;

end;
/

set serveroutput on
declare  
cursor c1 is select art_id, art_name from art;
art_record c1%ROWTYPE;

begin
open c1;
loop
fetch c1 into art_record ;
exit when c1% notfound;
dbms_output.put_line('Art no: '|| art_record.art_id || ' ' || 'Art name: ' || art_record.art_name);

end loop;
close c1;

end;
/

set serveroutput on
create or replace procedure getName is
max_quantity cart.total_ordered_quantity%type;
id cart.cust_id%type;
email customer.cust_email%type;

begin
select max(total_ordered_quantity) into max_quantity from cart ;
select cust_id into id from cart where total_ordered_quantity like max_quantity;
select cust_email into email from customer where cust_id = id ;
dbms_output.put_line('Max art ordered customer email: ' || email);

end;
/

begin
getName;
end;
/

drop procedure getName;

set serveroutput on
create or replace function getAvgPrice return number is
avg_price buy.art_price%type;

begin
select avg(art_price) into avg_price from buy;
return avg_price;

end;
/

begin
dbms_output.put_line('Average art price: ' || getAvgPrice);
end;
/

set serveroutput on
create or replace function div_price( amount payment.total_amount_in_doller%type)
return number is
pay payment.total_amount_in_doller%type;
begin
pay := amount/5;
return pay;

end div_price;
/

select pay_type, div_price(total_amount_in_doller) from payment where pay_id = 2;


create or replace trigger price_up
before insert or update
on buy
for each row

begin
if :new.art_price <800
then :new.art_price := :new.art_price + 200 ;
end if;
end price_up;
/

delete from payment;

rollback;

select * from payment;

insert into payment values (6,4,'debit card',750);
savepoint cont_6;
insert into payment values (7,5,'paypal',950);
savepoint cont_7;
rollback to cont_6;
rollback to cont_7;

select ex_start_date, ex_end_date from exhibition where ex_end_date-ex_start_date != 0;

select add_months(ex_start_date, 6) as six_months_extension from exhibition where art_id = 3;

select least(to_date('02-jan-2023'), to_date('21-sep-2023')) from dual ;

select greatest(to_date('02-jan-2023'), to_date('21-sep-2023')) from dual ;

select last_day(ex_start_date) from exhibition ;

select ex_id, extract(month from ex_end_date) as month from exhibition ;

create view view_publish as
select ex_id,artist_id, location 
from publish
where location = 'usa';  

select * from view_publish ;

drop view view_publish;
